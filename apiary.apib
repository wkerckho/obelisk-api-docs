FORMAT: 1A
HOST: https://rc.obelisk.ilabt.imec.be/api/v3

# Obelisk
Welcome to the Developer Documentation for the Obelisk Platform.

The following Reference material details how to authenticate, how to discover datasets and how to interact with the data (Querying, Streaming, Adding new data).

# Glossary
| Term          | Description                                                                                                                                                                                                                                                                                                                                                                                        |
|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Dataset**   | A Dataset is the primary unit data organizationin Obelisk. It represents a coherent collection of data for a specific domain, project or site.                                                                                                                                                                                                                                             |
| **Metric**    | A Metric represents a specific type of data. It is defined using a name and a type suffix. For example `humidity.rh::number` defines relative humidity measurements with a numerical value. Each Dataset can define its own unique set of Metrics (i.e. DatasetA and DatasetB can both define a Metric `power::number` but this does not necessarily mean they are referring to the same concept). |
| **Event**     | An Event represents a single data point for a Metric (e.g. a sensor measurement), having a timestamp, a value and a set of meta-data attributes (e.g. a location).                                                                                                                                                                                                                                 |
| **Thing**     | When publishing an Event to a Metric for a Dataset, an optional source Thing can be specified (as a user-defined ID). Things can be listed for a Dataset and additional meta-data can be attached to it. Use Things to help organizing your data!                                                                                                                                                  |
| **Producer**  | A Producer uniquely defines the origin of a single Event.                                                                                                                                                                                                                                                                                                                                          |
| **Geohash**   | A Geohash is a convenient way of expressing a location (anywhere in the world) using a short alphanumeric string, with greater precision obtained with longer strings.                                                                                                                                                                                                                             |
| **Data range**| A data range defines the subject of a Query, Stream or Export, by specifying the Datasets and Metrics that should be taken into account.                                                                                                                                                                                                                                                           |

# Group Auth API
This API allows you to authenticate yourself or your client application with the Obelisk Auth backend. Before you can use most of the APIs below, you will need to be authenticated first. An Access Token will be the proof that you are authenticated and authorized to execute the protected APIs.
Generally speaking, you always first need to execute the *authentication* step to receive a proof of authentication (`code`). Then you can exchange the proof of authentication for an Access Token. This Access Token can than be used for all the Obelisk APIs.

An Access Token should be added to the HTTP Authorization header like so:

> Authorization: Bearer `access_token`

With `access_token` obviously replaced by the Access Token that you received from the [Token endpoint](#/reference/auth-api/token).

**Client options**

A very important decision is if your client is confidential or not. It will determine how you have to login to keep your client secure. To help you with this decision you can read about this in the [Authentication guide](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#creating-a-client).

## Authentication [/auth/auth]
The first step is to get a *proof of authentication*. This is the `code` that will be returned to you after this step. It will be sent in the form of a redirect to a registered URI.

> **One exception: Confidential clients that have non-public accessible code can keep a `clientSecret` hidden from public view!**   
> They can hit the [Token endpoint](#/reference/auth-api/token) immediately as their client credentials act as *a proof of authentication*.**

### GET Authentication URL [GET /auth/auth{?response_type,state,scope,client_id,client_secret,code_challenge,code_challenge_method,redirect_uri,id_token}]
You should point your user agent to this URL. A 302 Redirect should return you to the appropriate login page where the user can login using his/her desired Identity Provider.
The result of this step will be a `code` which is the proof of authentication and sent to the `redirect_uri`. This will be used at the [Token endpoint](#/reference/auth-api/token) to exchange for an Access Token.

There are a lot of parameters available, but depending on the type of Client you have, some fields are required and others are not. Use the table below to match the properties of your client with the correct set of parameters.

Confidential    | On behalf of User |  Data Structure
----------------|-------------------|-----------------
no              | yes               | [PublicUserAuthRequest](#/data-structures/0/public-user-auth-request)
no              | no                | [PublicClientAuthRequest](#/data-structures/0/public-client-auth-request)
yes             | yes               | [ConfidentialUserAuthRequest](#/data-structures/0/confidential-user-auth-request)
yes             | no                | *(Immediately go to [Token](#/reference/auth-api/token) endpoint)*

+ Parameters
    + `response_type`: `code` (fixed) - The response type that will be sent back. Only `code` is supported.
    + state (string) - A url-encoded string representing state. This string will be sent back in its integrity to the client.
    + scope (enum[string]) (string) - A space-delimited list of requested scopes.
        + `openid` - **To authenticate on behalf of a user at least `openid` scope is required.**
        + `client` - **To authenticate as a client application at least `client` scope is required.**
    + `client_id` (string) - The clientId of the client that is being used to log in with.
    + `code_challenge` (string, optional) - **If your code is publicly readable, always use a code challenge!** 
    
        Read more about [PKCE](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#pkce-extension) and how to generate a code_challenge.
        
    + `code_challenge_method`: `S256` (string, optional) - Tell the backend which hash method you've used.
    + `redirect_uri` (string, optional) - Full https URL that will be called with the `code` after the authentication procedure on the backend is done.
    + `id_token` (string, optional) - Send an ID Token as proof of your authentication. This will make you skip login, if there is a session still active for you on the Obelisk Auth backend.
    
+ Request GET Auth (application/x-www-url-encoded)

+ Response 302

    + Headers

            Location: https://redirect_uri?code=abcd&state=1234


## Token [/auth/token]
Exchange a `code` for a token. The [Authentication step](#/reference/auth-api/authentication) gave you a `code` as *proof of authentication*. You can now use it to exchange it with a token.

**Response format**

```json
{
    "token" : "XNQNtuEZDfarzeDN",
    "id_token" : "eyJraWQiOiI4MWQ...aBNlpuJorINalsKgrFs6fCCYPw",
    "max_idle_time" : 3600,
    "max_valid_time": 86400,
    "remember_me" : false
}
```

key | description
--- | -----------
`token`| Your *access_token* to use as Bearer Token for Obelisk API calls.
`id_token`| Your id_token, used for customizing your application to some user values. If you store it, you can send it to the [Authentication endpoint](#/reference/auth-api/authentication) to skip login, if there is a session active for that user.
`max_idle_time`| Maximum time (in seconds) the access_token stays valid, if not being used on API calls.
`max_valid_time`| Maximum time (in seconds) the access_token stays valid, even if it is being used within max_idle_time windows.
`remember_me`| This is a hint towards the Client application. It is set to `true` if the user toggled *remember me* during the login proces. It is up to your own application to support this or not. The `remember_me` is a hint towards the Client application.



### Getting a Token [POST]
You can send quite a few parameters along (as you can see in the [TokenRequest](#/data-structures/0/token-request) data structure.
To simplify things, you can use the table below and pick the format that you need to send.

Confidential    | On behalf of User | Request
----------------|-------------------|-----------------
no              | yes               | [Public Client](#/reference/auth-api/token/getting-a-token/200?mc=reference%2Fauth-api%2Ftoken%2Fgetting-a-token%2F200)
no              | no                | [Public Client](#/reference/auth-api/token/getting-a-token/200?mc=reference%2Fauth-api%2Ftoken%2Fgetting-a-token%2F200)
yes (*)         | yes               | [Confidential Client for User](#/reference/auth-api/token/getting-a-token/200-2?mc=reference%2Fauth-api%2Ftoken%2Fgetting-a-token%2F200-2)
yes (*)         | no                | [Confidential Client](#/reference/auth-api/token/getting-a-token/200-2?mc=reference%2Fauth-api%2Ftoken%2Fgetting-a-token%2F200-3)

**(*) Confidential clients must send the `client_id`, `client_secret` pair using the HTTP Authorization Basic scheme.**

> ```javascript
> /***** How to construct a HTTP Authorization Basic header ******/
> /** PSEUDO CODE - Adapt to your programming language **/
> // base64 encode the credential pair concatenated by a colon
> var enc = Base64.encode(client_id + ":" + client_secret)    
> // Add the Authorization header to the following string
> var headers = { Authorization: "Basic " + enc };
> ```

+ Request POST as Public Client (application/json)

    + Attributes (CodePKCETokenRequest)

+ Request POST as Confidential Client for User (application/json)

    + Headers
        
            Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=

    + Attributes (CodeNoPKCETokenRequest)

+ Request POST as Confidential Client (application/json)

    + Headers
        
            Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=

    + Attributes (ClientCredTokenRequest)

+ Response 200 (application/json)

        {
          "token" : "XNQNtuEZDfarzeDN",
          "id_token" : "eyJraWQiOiI4MWQ5MjhjYi1hNjQ4LTQyMDktYjk4OC00NjE0NDY2YTYyZTUiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjNjA1YjQ2OGYzZGQ1MTY2NmJjOTM4MGU5IiwibmFtZSI6IlB1YmxpY0FzSXRzZWxmIiwiZW1haWwiOiJ0ZXN0ZXJAb2JseC5pbyIsImlkcCI6ImxvY2FsIiwidHlwZSI6ImNsaWVudCIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoIiwiYXVkIjoiUHVibGljQXNJdHNlbGYiLCJleHAiOjE2MTkxODY1NzYsImp0aSI6Ik13YTJ0Tl9oZDNUaEhqZUdaOU5vTEEiLCJpYXQiOjE2MTY1OTQ1NzYsIm5iZiI6MTYxNjU5NDQ1Niwic2lkIjoiSVVUM0xITzhYRFl4MGk2ZyJ9.fH-ZBytOI6rBrH-CCBixpIvmD-MGflELiz2Kn1qiGfRREOT6wpGrEmxueyYLmhJDJkLswrcCdhKgM747MvPB4rkoRVM4DlYpDKzl4mIsb0bua1hC-TkxG5aW8W9ZUNj1vMXotDDnLPQhWtOPFDxyum2qdu8OHzQmTENuo72ujuegF4irv4BahW33fVUk7YznSHmoRwjFGqtzcvPZCfpD30fe-Q42aTQlGKig7cavVx5wFs2FNljdv9ft41g5HoneRTdRIDtsjYtMbk3z4OSE9uFIlGFjReAsIOn0ZvRKlrbCBb027kDHjQn15ZJvaBNlpuJorINalsKgrFs6fCCYPw",
          "max_idle_time" : 3600,
          "max_valid_time": 86400,
          "remember_me" : false
        }


## OpenID Configuration [/.well-known/openid-configuration]
Obelisk Auth hosts an openid-configuration page that contains all important information for OpenId communication.

### Get the OpenID-Configuration [GET]

+ Request GET OpenID-Configuration ()

    + Body

            {}

+ Response 200 (application/json)

        {
            "issuer": "https://obelisk.ilabt.imec.be/api/v3/auth",
            "token_endpoint": "https://obelisk.ilabt.imec.be/api/v3/auth/token",
            "jwks_uri": "https://obelisk.ilabt.imec.be/api/v3/auth/jwks",
            "id_token_signing_alg_values_supported": [
                "RS256"
            ],
            "code_challenge_methods_supported": [
                "plain",
                "S256"
            ]
        }

## JWKS - Json Web Key Set [/auth/jwks]
Obelisk ID Tokens are asymmetrically signed as a JWT (JSON Web Token). If desired, the integrity of an ID Token can be verified with the keys hosted at the JWKS endpoint.

### Get the Obelisk JWK set [GET]

+ Request GET JWKS

    + Body

            {}

+ Response 200 (application/json)

        {
            "keys": [
                {
                    "kty": "RSA",
                    "kid": "dbb90de0-66d9-473e-aeed-657e3f8ffa14",
                    "use": "sig",
                    "alg": "RS256",
                    "n": "xgS2HRQ8DV0ICjhX8JSE-QOWw3OmqUg4ppb--klTD5ejPYVRwEkbsca8EyWy91Wgn_SaKXqAHaXmI9N8m6L8GYkmHaWbWXzsgTC0ArPIsC-FFQd4WJNyj1y5BVK4JWGFNyabJAKjyFsYygDJmULQGaRB0jN6gwt6PZfmnNvOTYPfuvEXNtdgIKk4246wd9keBarv0oEYdR99j33NPYM5xk9qJTq6NRbB0fgKzt94xf9sLOIX0-p4NuvuX0hhqU4GTElEw_IKz_5-3YfPkkuMsPpTjgZcqAdydbfE6J5ZTbndHQLvPCKy3iuR7xPeliDuWd2ogLgM00aAp-YnjP98Uw",
                    "e": "AQAB"
                },
                {
                    "kty": "RSA",
                    "kid": "f12ea355-dafc-4f72-a39c-39fbd0afe13a",
                    "use": "sig",
                    "alg": "RS256",
                    "n": "kjE93p-dW0zKVaV_46phA0q2iJiiBh_yRcFp9HSFfEYgQVUAAVkNbzikScfwldjapctGD2E1tWGTo9fvjWyYDmElyFk19EAXeB5ZmJ8AHOjvTqa-A4PVaow8yZR4P-_rSSavnNalZjSkda9kP78ik1kZAio4kjZARdDdVryFeee47Y8wPppA0xSUv75EU3qQE8RV9YIA9VF0Izsjhg3LKFSO_hvUM8YDEMOOm5JW6hbtVmuBQOHmqY3LBNyzrrxQKbjdm2oCcXZI5F1UKMZwjCTgtdrqglKBGbMiTgj_Z5rPfSbviVY3dvxcUBd2v6r2cZCZBbvXNMQb8mH20y8c0w",
                    "e": "AQAB"
                }
            ]
        }


# Group Catalog API
This API allows you to interact with Obelisk as a Data Catalog. 
Most clients will mainly be using the Catalog to discover which Datasets are available and 
which Metrics and Sources (e.g. sensor devices) they provide. The resulting information can then be used to query the Data API.

## GraphQL [/catalog/graphql]
Instead of exposing the Catalog API as a traditional set of REST endpoints, we opted for a [GraphQL](https://graphql.org) based solution.

Our Catalog Data Model contains a lot of relations between types and the expressive GraphQL Query mechanism facilitates in getting exactly 
the information you need, with a minimal amount of requests needed. 

The following paragraph gives some examples of useful queries. The full documentation can be found [here](https://rc.obelisk.ilabt.imec.be/apiconsole/).

### Example GraphQL Queries
#### Discover which Datasets you have access to
There is a top-level `me` field, which refers to the authenticated User. One of the User's attributes allows you to access the Datasets the User is a member of.

```
me {
  datasets {
    items {
      id
      name
    }
  }
}
```

#### Discover which Metrics are available for a Dataset
You can get meta-data information for a specific Dataset, which can be useful to discover what Metrics can be queried using the Data API.

```
dataset(id: "1582038755100") {
    metrics {
        items {
            id
            properties
        }
        cursor
    }
}
```

**Note on paging**: A lot of fields return a Paged collection (to prevent the service from returning large results). 
By also returning the `cursor` field, you can check if a next page is available (cursor != null) and use it to retrieve the next page by supplying the cursor as a parameter.

#### Create a stream for a Dataset
The GraphQL API is not limited to retrieving information, but can also be used to perform certain actions, such as requesting the creation of a new stream. This is done using a Mutation:

```
mutation {
  createStream(input {
    dataRange {
      datasets: ["1582038755100", "1582038762702"]
      metrics: ["airquality.no2::number"]
    }
  }) {
    responseCode
    message
  }
}
```

### GraphQL Endpoint
GraphQL exposes a single endpoint that you can use to execute GraphQL queries (or mutations):

### Executing a GraphQL Query [POST]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Token
            
    + Attributes (GraphQLRequest)
+ Response 200 (application/json)

# Group Data API
Once a client knows the Datasets that are available to interact with (thanks to the Catalog API), it can call the HTTP Operations of the Data API 
for inserting or retrieving data.

## Error Handling
When successful, the HTTP Operations below will return a 200 or 204 Status Code. 
If the Status Code is in the 4xx or 5xx range, something went wrong. 
We will also return a standardized error Response Body to help you handling errors in your application code. For example:

```json
{
  "error" : {
    "status" : 404,
    "message" : "A Dataset with the specified ID could not be found!"
  }
}
```

Common error Status Codes are:
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
- 403 `Forbidden` - access denied.
- 404 `Not Found` - a requested resource was not found.
- 429 `Too Many Requests` - the rate limiter cancelled the request. Try again later.
- 500 `Internal Server Error` - an unexpected error occurred. Contact the administrator if this keeps happening.

## Ingesting Data [/data/ingest/{datasetId}{?timestampPrecision,mode}]
With the appropiate permissions, clients can ingest data in the form of Metric Events for a specific Dataset.

+ Parameters
    + datasetId (string) - The ID of the dataset to upload the events to.
    + timestampPrecision (enum[string], optional) - Determines how the UTC timestamps for the Metric Events should be interpreted.
        + Default: milliseconds
        + Members
            + microseconds
            + milliseconds
            + seconds
    + mode (enum[string], optional) - Determines how the ingest batch is processed. Should the input data be stored? Or be streamed to subscribed clients? Or both (default)?
        + Default: default
        + Members
            + default
            + stream_only
            + store_only
### Uploading Events [POST]
Metrics Events are uploaded as a JSON array of objects representing the individual events.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Token
            
    + Attributes (IngestBatch)

+ Response 204

## Querying Data [/data/query]
With the appropiate permissions, clients can query data over a range of Datasets. There are three different query modes:

### Getting Raw Events [POST /data/query/events]
Retrieve Metric Event objects in the form they were ingested into a Dataset. Various Metrics of various Datasets can be combined into a single resultset.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Token
            
    + Attributes (EventsQuery)

+ Response 200 (application/json)
    + Attributes (EventsQueryResult)

### Getting Aggregate Data [POST /data/query/events/stats]
Calculate aggregate data (e.g. minimum value, count) over a specific Data Range. Aggregates can be calculated across Metric and Dataset boundaries, but are restricted to Metrics of type `::number` (including numerical Metrics derived from `::json`, e.g. `AirqualityObserved::json/temperature.value::number`).

+ Request (application/json)
    + Headers
    
            Authorization: Bearer Token
            
    + Attributes (StatsQuery)

+ Response 200 (application/json)
    + Attributes (StatsQueryResult)

## Streaming Data [/data/streams/{streamId}]
Clients can request new Data Streams using the Catalog API (or via Obelisk Web). Once a Data Stream has been successfully created, the client can open a streaming session using the following endpoint:

### Opening a Stream [GET]
Get a continuous stream of Metric Events matching the original Data Stream parameters in the form of [Server-Sent-Events (SSE)](https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events).

+ Parameters
    + streamId: 4a04-b994 (string) - The ID of the stream to open.

+ Request
    + Headers

            Accept: text/event-stream
            Authorization: Bearer Token

+ Response 200 (text/event-stream)
    + Body
    
            data: {"timestamp":1583246293374,"metric":"test::json","value":{"r":178,"g":64,"b":207}}
            
            data: {"timestamp":1583246297919,"metric":"test::number","value":0.47421719215489455}
            
            data: {"timestamp":1583246297920,"metric":"test::string","value":"07a432c1-ac44-476c-aafd-e6e53e4e5365"}
            
            data: {"timestamp":1583246297922,"metric":"test::json","value":{"r":201,"g":62,"b":87}}

## Exporting Data [/data/exports/{exportId}]
Clients can request large batches of raw Metric Events to be exported using the Catalog API (or via Obelisk Web). 
A successful export will result in a compressed CSV file that can be downloaded using the following endpoint:

### Downloading an Export [GET]


+ Parameters
    + exportId: f3fd1324940 (string) - The ID of the export to download.
    
+ Request
    + Headers
    
            Authorization: Bearer Token
            

+ Response 200 (application/zip)

# Data Structures

## EventsQuery (object)

+ dataRange (DataRange, required)
+ timestampPrecision (enum[string], optional) - _(Optional)_ Defines the timestamp precision for the returned results.
    + Members
        + microseconds
        + milliseconds
        + seconds
    + Default: milliseconds
+ fields (array[EventField], fixed-type, optional) - _(Optional)_ List of fields to return in the result set. Defaults to [metric, source, value]
+ from (number, optional) - _(Optional)_ Limit output to events after (and including) this UTC millisecond timestamp.
+ to (number, optional) - _(Optional)_ Limit output to events before (and excluding) this UTC millisecond timestamp.
+ orderBy (OrderBy, optional) - _(Optional)_ Specifies the ordering of the output, defaults to ascending by timestamp.
+ filter (FilterExpression, optional) - _(Optional)_ Limit output to events matching the specified Filter expression.
+ limit (number, optional) - _(Optional)_ Limit output to a maximum number of events. Also determines the page size. Defaults to 2500.
+ limitBy (LimitBy, optional) - _(Optional)_ Limit the combination of a specific set of Index fields to a specified maximum number.
+ cursor (string, optional) - _(Optional)_ Specifies the next cursor, used when paging through large result sets.

## EventsQueryResult (object)
+ items (array[MetricEvent], fixed-type) - (A part of) the requested resultset.
+ cursor (string, optional) - If the resultset is larger than the requested or maximum page size, a String cursor is returned that can be used to fetch the next result.

## MetricEvent (object)
+ timestamp (number) - UTC timestamp of the Event (with a precision determined by the Query, default: milliseconds).
+ dataset (string, optional) - ID of the Dataset the Event belongs to.
+ metric (string, optional) - ID of the Metric the Event belongs to.
+ value (MetricValue, optional) - The raw value that was recorded for the Event.
+ producer (object, optional) - The Producer of the Event
    - userId (string)
    - clientId (string)
+ source (string, optional) - The ID of the Thing that is the source of the Event (Producer-specified).
+ tags (array[string], optional) - A set of Producer-specified tags for the Event.
+ location (Location, optional) - The location where the Event was recorded.
+ geohash (string, optional) - The location as a Geohash
+ elevation (number, optional) - The height in meters (relative to ground-level at the location)
+ tsReceived (number, optional) - The time at which Obelisk received the Event (UTC milliseconds)

## Location (object)
+ lat (number) - The latitude of the Location.
+ lng (number) - The longitude of the Location.

## MetricValue (*)
Value of the Event, can be any JSON type (number, string, bool, array, object).

## IndexField (enum)
+ timestamp - UTC timestamp of the Event (with a precision determined by the Query, default: milliseconds).
+ dataset - ID of the Dataset the Event belongs to.
+ metric - ID of the Metric the Event belongs to.
+ producer - The Producer of the Event
+ source - The ID of the Thing that is the source of the Event (Producer-specified).
+ geohash - The location as a Geohash

## EventField (enum)
+ timestamp - UTC timestamp of the Event (with a precision determined by the Query, default: milliseconds).
+ dataset - ID of the Dataset the Event belongs to.
+ metric - ID of the Metric the Event belongs to.
+ producer - The Producer of the Event
+ source - The ID of the Thing that is the source of the Event (Producer-specified).
+ value - The raw value that was recorded for the Event.
+ tags - A set of Producer-specified tags for the Event.
+ location - The location where the Event was recorded.
+ geohash - The location as a Geohash
+ elevation - The height in meters (relative to ground-level at the location)
+ tsReceived - The time at which Obelisk received the Event (UTC milliseconds)

## StatsQuery (object)

+ dataRange (DataRange, required)
+ timestampPrecision (enum[string], optional) - _(Optional)_ Defines the timestamp precision for the returned results.
    + Members
        + microseconds
        + milliseconds
        + seconds
    + Default: milliseconds
+ fields (array[StatsField], optional) - List of fields to return in the result set. Defaults to [mean, count]
    + Default: mean, count
+ from (number, optional) - Limit aggregate to events after (and including) this UTC millisecond timestamp.
+ to (number, optional) - Limit aggregate to events before (and excluding) this UTC millisecond timestamp.
+ orderBy (OrderBy, optional) - _(Optional)_ Specifies the ordering of the output, defaults to ascending by timestamp.
+ filter (FilterExpression, optional) - _(Optional)_ Limit aggregate to events matching the specified Filter expression.
+ groupBy (GroupBy, optional) - Group the results by time, metadata field or location.
+ limit (number, optional) - Limit output to a maximum number of events. Also determines the page size. Defaults to 60.
+ cursor (string, optional) - Specifies the next cursor, used when paging through large result sets.

## OrderBy (object)
+ fields (array[IndexField]) - List of fields to order by.
+ ordering (enum[string], optional) - Sort order.
    + Members
        + asc
        + desc
    + Default: asc

## LimitBy (object)
+ fields (array[IndexField]) - List of fields to limit by.
+ limit (number) - Limit results for the specified fields combination.

## StatsQueryResult (object)
+ items (array[MetricStat]) - (A part of) the requested resultset.
+ cursor (string, optional) - If the resultset is larger than the requested or maximum page size, a String cursor is returned that can be used to fetch the next result.

## MetricStat (object)
+ timestamp (number) - UTC timestamp of the Event (with a precision determined by the Query, default: milliseconds).
+ dataset (string) - ID of the Dataset the Event belongs to.
+ metric (string) - ID of the Metric the Event belongs to.
+ producer - The Producer of the Event
    - userId (string)
    - clientId (string)
+ source (string) - The ID of the Thing that is the source of the Event (Producer-specified).
+ geohash (string) - The location as a Geohash (is available here, because it can be used to group on).
+ min (number) - The minimum value for all Events of a numerical Metric type that match the query parameters.
+ max (number) - The maximum value for all Events of a numerical Metric type that match the query parameters.
+ mean (number)- The mean value for all Events of a numerical Metric type that match the query parameters.
+ stddev (number)- The standard deviation for all Events of a numerical Metric type that match the query parameters.
+ count (number) - The number of Events of a numerical Metric type that match the query parameters.

## StatsField (enum) 
+ dataset
+ metric
+ producer
+ source
+ geohash
+ min
+ max
+ mean
+ stddev
+ count
+ sum

## FilterExpression (object)
_(Optional)_ Allows filtering Query results using a JSON filter expression model. For example:

**Property equality**
```json
{
  "source" : {
    "_eq" : "lora.9dd7c139-c5c3"
  }
}
```

**Logical AND with field test**
```json
{
  "_and" : [
    {
      "source" : {
        "_eq" : "lora.9dd7c139-c5c3"
      }
    },
    {
      "_exists" : "location"
    }
  ]
}
```

### Properties
- One Of
    - _and (array[FilterExpression]) - Logical AND (all child expressions match)
    - _or (array[FilterExpression]) - Logical OR (one of the child expressions matches)
    - _not (FilterExpression) - Logical NOT (the child expression does not match)
    - _exists (string) - True for MetricEvents that have the specified field
    - _withTag (string) - True for MetricEvents that have the specified tag
    - _withAnyTag (array[string]) - True for MetricEvents that have at least one of the listed tags.
    - _locationInCircle (object) - True for MetricEvents with a Location inside of the circle specified by the provided center coordinate and radius.
        + center (Location) - Center of the circle as a Location (latitude, longitude pair).
        + radius (number) - The radius of the circle (in meters).
    - _locationInPolygon (array[Coordinate2D]) - True for MetricEvents with a Location inside of the polygon specified by the provided vertices list. The vertices (minimum 3) should be specified in a clockwise or counterclockwise order, with each vertice representing a coordinate.
    - *fieldName (string)*
        - One Of
            - _eq (*) - Check if the field is equal to the specified value
            - _neq (*) - Check if the field is not equal to the specified value
            - _gt (*) - Check if the field is greater than the specified value
            - _gte (*) - Check if the field is greater than or equal to the specified value
            - _lt (*) - Check if the field is less than the specified value
            - _lte (*) - Check if the field is less than or equal to the specified value
            - _in (array) - Check if the field value is in the specified array
            - _startsWith (string) - Check if the string value of the field starts with the specified prefix
            - _regex (string) - Check if the field matches the specified regular expression
            - _options (string) - Use in conjunction with regex to specify regex options. Currently we only support `i` to signal that the regex should ignore case.

## Coordinate2D (array[number])

## GroupBy (object)
+ fields (array[IndexField], fixed-type, optional) - Allows grouping by a specific set of meta-data fields.
+ time (object, optional) - When grouping by time, allows specifying the time interval to group by.
    - interval: 1 (number) - Length of the time interval.
    - intervalUnit: hours (IntervalUnit, optional) - Unit of the time interval.
    - offset (number, optional) - Length of the offset to apply (e.g. useful to correct timezone differences when requesting daily aggregates).
    - offsetUnit (IntervalUnit, optional) - Unit of the offset to apply.
+ geohashPrecision (number, optional) - When grouping by geohash, allows grouping by geohashes of a certain precision (between 4 and 8, default 4).

## IntervalUnit (enum)
+ seconds
+ minutes
+ hours
+ days

## DataRange (object)
Specifies the Datasets and Metrics that should be taken into account. The Dataset IDs must be specified, but Metric IDs are optional.

**Type Wildcard**

The `metrics` list supports wildcards, you can e.g. request all metrics of type number to be returned using `*::number`.

**Extracting JSON attributes**

You can extract individual fields from Metrics of type `::json`, which allows you to combine them as a derived Metric in combination with other Metrics of the same type.
For example:

```json
{
  "datasets" : ["1582043401098"],
  "metrics" : ["airquality.no2::number", "AirqualityObserved::json/NO->value::number"]
}
```

When querying raw events using this DataRange, the resultset will contain values for the primitive Metric `airquality.no2::number` along with values that were extracted from the Metric `AirqualityObserved::json` using the specified json path (`NO->value`). 

### Properties
+ datasets (array[string]) - The IDs of the Datasets the Query should take into account.
+ metrics (array[string], optional) - The IDs of the Metrics the Query should take into account.
    + Default: "*::number", "::number[]", "::bool", "::string", "::json"

## IngestBatch (array[IngestMetricEvent], fixed-type)
    
## IngestMetricEvent (object)
+ timestamp (number, optional) - _(Optional)_ UTC Timestamp for the Event (with a precision determined by the Ingest request), defaults to 'now'.
+ metric (string) - The ID of the Metric the Event belongs to, i.e. the name of the timeseries. This can be any string, but should end in one of the supported type suffixes: `::number`, `::number[]`, `::bool`, `::string`, `::json`.
+ value (MetricValue) - The value for the event. The type of the value must match the type of the timeseries indicated by the metric type suffix.
+ source (string, optional) - _(Optional)_ The ID of the Thing that is the source of the Event (Producer-specified).
+ tags (array[string], optional) - _(Optional)_ A set of Producer-specified tags for the Event
+ location (object, optional) - _(Optional)_ The location the Event was recorded at.
    - lat (number)
    - lng (number)
+ elevation (number, optional) - _(Optional)_ The height in meters (relative to ground-level at the location)

## GraphQLRequest (object)
+ query (string) - The GraphQL Query (or Mutation) to execute.
+ operationName (string, optional) - An optional operationName, only required if multiple operations are present in the query.
+ variables (object, optional) - Allows setting the value for variables used in the query.

## DatasetResourceList (array[DatasetResource], fixed-type)

## DatasetResource (object)
+ timestamp: 1583322490155 (number) - UTC Timestamp that indicates when the Resource was last updated.
+ fileName: sensorsOverview1920.pdf (string) - File name of the resource. Used as resourceID when retrieving Resources.
+ mimeType: application/pdf (string) - MIME type (e.g. image/png) for the resource.
+ sizeBytes: 145408 (number) - The file size of the Resource (in bytes).

## AuthRequest (object)
+ `response_type`: code (fixed) - The response type that will be sent back. Currently only `code` is supported.
+ state (string) - A url-encoded string representing state. This string will be sent back in its integrity to the client.
+ scope (enum[string]) (string) - A space-delimited list of requested scopes.
    + `openid` - **To authenticate on behalf of a user at least `openid` scope is required.**
    + `client` - **To authenticate as a client application at least `client` scope is required.**
+ `client_id` (string) - The clientId of the client that is being used to log in (with).
+ `code_challenge` (string) - **If your code is publicly readable, always use a code challenge!**
    Read more about [PKCE](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#pkce-extension) and how to generate a code_challenge.
+ `code_challenge_method`: `S256` (fixed) - Tell the backend which hash method you used. *(SHA-256)*.
+ `redirect_uri` (string, optional) - Full https URL that will be called with the `code` after the authentication procedure on the backend is done.
+ `id_token` (string, optional) - Send an ID Token as proof of your authentication. This will make you skip login, if there is a session still active for you on the Obelisk Auth backend.

## PublicUserAuthRequest (object)
+ `response_type`: code (fixed) - The response type that will be sent back. Currently only `code` is supported.
+ state (string) - A url-encoded string representing state. This string will be sent back in its integrity to the client.
+ scope: `openid` (string) - **To authenticate on behalf of a user at least `openid` scope is required.**
+ `client_id` (string) - The clientId of the client that is being used to log in (with).
+ `code_challenge` (string) - Read more about [PKCE](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#pkce-extension) and how to generate a code_challenge.
+ `code_challenge_method`: `S256` (fixed) - Tell the backend which hash method you used. *(SHA-256)*.
+ `redirect_uri` (string, optional) - Full https URL that will be called with the `code` after the authentication procedure on the backend is done.
+ `id_token` (string, optional) - Send an ID Token as proof of your authentication. This will make you skip login, if there is a session still active for you on the Obelisk Auth backend.

## PublicClientAuthRequest (object)
+ `response_type`: code (fixed) - The response type that will be sent back. Currently only `code` is supported.
+ state (string) - A url-encoded string representing state. This string will be sent back in its integrity to the client.
+ scope: `client` (string) - **To authenticate as a client application at least `client` scope is required.**
+ `client_id` (string) - The clientId of the client that is being used to log in (with).
+ `code_challenge` (string) - Read more about [PKCE](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#pkce-extension) and how to generate a code_challenge.
+ `code_challenge_method`: `S256` (fixed) - Tell the backend which hash method you used. *(SHA-256)*.
+ `redirect_uri` (string, optional) - Full https URL that will be called with the `code` after the authentication procedure on the backend is done.
+ `id_token` (string, optional) - Send an ID Token as proof of your authentication. This will make you skip login, if there is a session still active for you on the Obelisk Auth backend.

## ConfidentialUserAuthRequest (object)
+ `response_type`: code (fixed) - The response type that will be sent back. Currently only `code` is supported.
+ state (string) - A url-encoded string representing state. This string will be sent back in its integrity to the client.
+ scope: `openid` (string) - **To authenticate on behalf of a user at least `openid` scope is required.**
+ `client_id` (string) - The client_id of the client that is being used to log in (with).
+ `redirect_uri` (string, optional) - Full https URL that will be called with the `code` after the authentication procedure on the backend is done.
+ `id_token` (string, optional) - Send an ID Token as proof of your authentication. This will make you skip login, if there is a session still active for you on the Obelisk Auth backend.

## TokenRequest (object)
+ `grant_type` (enum[string], required) - Which kind of *proof of authentication* are you sending.
    + `authorization_code` - This requires you to send the `code` parameter along and either `code_verifier` or `client_secret`.
    + `client_credentials` - This requires you to send the `clientSecret` parameters along.
+ code (string) - The `code` retrieved from the authentication step. *(not required for `client_credentials` grant_type)*
+ `client_id` (string, required) - The client_iod of the Client that is being used to authenticate (with)
+ One of
    + `code_verifier` (string, required) - The code_verifier that was being used to generate the code_challenge in the [Authentication step](#/reference/auth-api/authentication). 
        
        Read more about [PKCE](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#pkce-extension) and how to generate a code_verifier.
        
        **Use with publicly accessible clients**
    + `client_secret` (string, required) - The client_secret of the Client that is being used to authenticate (with)
        **Use only with non-publicly-accessible (confidential) clients!**

## CodePKCETokenRequest (object)
+ `grant_type`: `authorization_code` (fixed, required) - This requires you to send the `code` and `code_verifier` paramteres along
+ code (string) - The `code` retrieved from the authentication step. 
+ `client_id` (string, required) - The client_iod of the Client that is being used to authenticate (with)
+ `code_verifier` (string, required) - The code_verifier that was being used to generate the code_challenge in the [Authentication step](#/reference/auth-api/authentication).
    Read more about [PKCE](https://rc.obelisk.ilabt.imec.be/docs/guides/auth/#pkce-extension) and how to generate a code_verifier.

## CodeNoPKCETokenRequest (object)
+ `grant_type`: `authorization_code` (fixed, required) - This requires you to send the `code` and `code_verifier` paramteres along
+ code (string) - The `code` retrieved from the authentication step. 
+ `client_id` (string, required) - The client_id of the Client that is being used to authenticate (with)

## ClientCredTokenRequest (object)
+ `grant_type`: `client_credentials` (fixed, required) - This requires you to send the `client_secret` parameters along.